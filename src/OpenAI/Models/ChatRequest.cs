using SharpToken;
using System.Text.Json.Serialization;

namespace OpenAI.Models;

public class ChatRequest
{

    public ChatRequest Clone()
    {
        var req = (ChatRequest)MemberwiseClone();
        req.Messages.Clear();
        return req;
    }

    public int CountMessagesTokens()
    {
        int tokensPerMessage;
        if (Model.StartsWith("gpt-3.5-turbo"))
        {
            tokensPerMessage = 5;
        }
        else if (Model.StartsWith("gpt-4"))
        {
            tokensPerMessage = 4;
        }
        else
        {
            tokensPerMessage = 5;
        }

        var encoding = GptEncoding.GetEncoding("cl100k_base");
        int totalTokens = 0;
        foreach (var msg in Messages)
        {
            totalTokens += tokensPerMessage;
            totalTokens += encoding.Encode(msg.Content).Count;
        }
        totalTokens += 3;

        return totalTokens;
    }

    /// <summary>
    /// ID of the model to use. Currently, only <b>gpt-3.5-turbo</b> and <b>gpt-3.5-turbo-0301</b> are supported.
    /// </summary>
    [JsonPropertyName("model")]
    public string Model { get; set; } = "gpt-3.5-turbo-0301";

    /// <summary>
    /// The messages to generate chat completions for, in the <a href="https://platform.openai.com/docs/guides/chat/introduction">chat format</a>.
    /// </summary>
    [JsonPropertyName("messages")]
    public List<ChatMessage> Messages { get; set; } = new List<ChatMessage>();

    /// <summary>
    /// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
    /// <br></br>
    /// We generally recommend altering this or <see cref="TopP" /> but not both.
    /// </summary>
    [JsonPropertyName("temperature")]
    public decimal? Temperature { get; set; }

    /// <summary>
    /// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
    /// <br></br>
    /// We generally recommend altering this or <see cref="Temperature"/> but not both.
    /// </summary>
    [JsonPropertyName("top_p")]
    public decimal? TopP { get; set; }

    /// <summary>
    /// How many chat completion choices to generate for each input message.
    /// </summary>
    [JsonPropertyName("n")]
    public int? N { get; set; }

    /// <summary>
    /// If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a <b>data: [DONE]</b> message.
    /// </summary>
    [JsonPropertyName("stream")]
    public bool? Stream { get; set; }

    /// <summary>
    /// Up to 4 sequences where the API will stop generating further tokens.
    /// </summary>
    [JsonPropertyName("stop")]
    public string? Stop { get; set; }

    /// <summary>
    /// The maximum number of tokens allowed for the generated answer. By default, the number of tokens the model can return will be (4096 - prompt tokens).
    /// </summary>
    [JsonPropertyName("max_tokens")]
    public uint? MaxTokens { get; set; }

    /// <summary>
    /// Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
    /// <br></br>
    /// <a href="https://platform.openai.com/docs/api-reference/parameter-details">See more information about frequency and presence penalties.</a>
    /// </summary>
    [JsonPropertyName("presence_penalty")]
    public decimal? PresencePenalty { get; set; }

    /// <summary>
    /// Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
    /// <br></br>
    /// <a href="https://platform.openai.com/docs/api-reference/parameter-details">See more information about frequency and presence penalties.</a>
    /// </summary>
    [JsonPropertyName("frequency_penalty")]
    public decimal? FrequencyPenalty { get; set; }

    /// <summary>
    /// Modify the likelihood of specified tokens appearing in the completion.
    /// <br></br>
    /// <br></br>
    /// Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
    /// </summary>
    [JsonPropertyName("logit_bias")]
    public Dictionary<string, int>? LogitBias { get; set; }

    /// <summary>
    /// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse.
    /// </summary>
    [JsonPropertyName("user")]
    public string? User { get; set; }
}
