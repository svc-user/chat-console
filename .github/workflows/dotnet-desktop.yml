name: .NET Core Console

on:
  push:
    tags: 
      - v*.*.*

jobs:

  build:

    strategy:
      matrix:
        configuration: [Release]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      Solution_Name: chat-console.sln
      ChatConsole_Name: ./src/ChatConsole/ChatConsole.csproj
      ChatConsole_Publish_Dir: ./src/ChatConsole/bin/Publish/

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    # - name: Setup MSBuild.exe
    #   uses: microsoft/setup-msbuild@v1.0.2

    # Execute all unit tests in the solution
    # - name: Execute unit tests
    #   run: dotnet test

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    # - name: Restore the application
    #   run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
    #   env:
    #     Configuration: ${{ matrix.configuration }}

    # Publish the ChatConsole.exe application
    - name: Build the console application
      run: dotnet publish $env:ChatConsole_Name --ucr --no-self-contained -c $env:Configuration -o $env:ChatConsole_Publish_Dir
      env:
        Configuration: ${{ matrix.configuration }}

    - name: List files in the publish directory
      run: |
        ls $env:ChatConsole_Publish_Dir

    - name: Store artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ChatConsole ${{ env.GITHUB_REF_NAME }}
        path: D:\a\chat-console\chat-console\src\ChatConsole\bin\Publish
        if-no-files-found: error
